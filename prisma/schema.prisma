// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cohort {
  id   Int      @id @default(autoincrement())
  name  String
  users CohortUser[]
  description String?
  isArchived Boolean @default(false)
  startDate DateTime?
  endDate DateTime? 
}

model User {
  id    Int      @id @default(autoincrement())
  number String   @unique
  name  String?
  messagesSent Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  threads Thread[] @relation("ThreadParticipants")
  autoreply String?
  isOwner Boolean @default(false)
  cohorts CohortUser[]
  adminNote String?
}

model CohortUser {
  userId   Int
  cohortId Int
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  cohort   Cohort  @relation(fields: [cohortId], references: [id], onDelete: Cascade)

  @@id([userId, cohortId])
}

model Message {
  id    Int      @id @default(autoincrement())
  body  String?
  mediaUrl String?
  sender User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId Int
  receiver User   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  thread Thread? @relation("ThreadMessages", fields: [threadId], references: [id], onDelete: Cascade)
  threadId Int?
  scheduledAt DateTime?
  triggerAt DateTime?
  isSent Boolean? @default(false)
}

model Thread {
  id   Int      @id @default(autoincrement())
  participants User[] @relation("ThreadParticipants")
  messages Message[] @relation("ThreadMessages")
}

model PassCode {
  id   Int      @id @default(autoincrement())
  code String @unique
}
